module.exports =
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.ts":
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "ProgressSmoother": function() { return /* reexport */ ProgressSmoother; }
});

;// CONCATENATED MODULE: ./src/ProgressSmoother.ts
function ProgressSmoother(config) {
  var _a, _b;

  var minFinishDuration = 1000; // If set to 0, the download with abruptly move to 100% on the final chunk. This way it smooths over 1000ms.

  var maxForecastFactor = 0.33; // How much to estimate without receiving a single chunk.

  var minSetupTime = (_a = config.minDelayUntilFirstValue) !== null && _a !== void 0 ? _a : 0;
  var minTeardownTime = (_b = config.teardownTime) !== null && _b !== void 0 ? _b : 0;
  var valueIncreaseRatePerSecond = config.valueIncreaseRatePerSecond,
      averageTimeBetweenValues = config.averageTimeBetweenValues,
      maxValue = config.maxValue,
      valueIncreaseDelta = config.valueIncreaseDelta;

  var _lastReading;

  var lastTimeMinus1 = Date.now();
  var lastYieldedValue = 0;
  var movingAverage = 0;

  function returnMonotonic(getValue) {
    var value = getValue();

    if (value > lastYieldedValue) {
      lastYieldedValue = value;
    }

    return lastYieldedValue;
  }

  function hasFinished(lastReading) {
    return lastReading.value === maxValue;
  }

  function fromLastReading(lastReading, now) {
    if (hasFinished(lastReading)) {
      var teardownTime = Math.max(minFinishDuration, minTeardownTime);
      var millisElapsed = now - lastReading.time;
      var percentageIntoTeardown = millisElapsed / teardownTime;
      var percentageIntoTeardownCapped = Math.min(1, percentageIntoTeardown);
      var percentageIntoTeardownEased = easeInQuad(percentageIntoTeardownCapped);
      var delta = lastReading.value - movingAverage;
      return movingAverage + delta * percentageIntoTeardownEased;
    }

    return calculateEMA(lastReading.value, now, lastTimeMinus1);
  }

  function forecastInitialValue(now) {
    var maxForecastSize = Math.min(valueIncreaseDelta, maxValue * maxForecastFactor);
    var maxForecastTransferTime = maxForecastSize / valueIncreaseRatePerSecond * 1000;
    var maxTwiddleTime = minSetupTime + maxForecastTransferTime;
    var millisElapsed = now - lastTimeMinus1;
    var percentageIntoTwiddleTime = millisElapsed / maxTwiddleTime;
    var percentageIntoTwiddleTimeCapped = Math.min(1, percentageIntoTwiddleTime);
    return percentageIntoTwiddleTimeCapped * maxForecastSize;
  }

  function alpha(now, lastTime) {
    var alphaMagicNumber = 3.5; // This just seems to work best, from playing around.

    return 1 - Math.exp(-(now - lastTime) / (averageTimeBetweenValues * alphaMagicNumber));
  }

  function calculateEMA(value, now, lastTime) {
    var a = alpha(now, lastTime);
    return a * value + (1 - a) * movingAverage;
  }

  function easeInQuad(x) {
    return x * x;
  }

  function setValue(value, nowMaybe) {
    if (_lastReading !== undefined) {
      if (hasFinished(_lastReading)) {
        return;
      }

      movingAverage = calculateEMA(_lastReading.value, _lastReading.time, lastTimeMinus1);
      lastTimeMinus1 = _lastReading.time;
    }

    _lastReading = {
      time: nowMaybe !== null && nowMaybe !== void 0 ? nowMaybe : Date.now(),
      value: Math.min(value, maxValue)
    };
  }

  function smoothedValue(nowMaybe) {
    return returnMonotonic(function () {
      var now = nowMaybe !== null && nowMaybe !== void 0 ? nowMaybe : Date.now();

      if (_lastReading !== undefined) {
        return fromLastReading(_lastReading, now);
      }

      return forecastInitialValue(now);
    });
  }

  function smoothedFactor(nowMaybe) {
    return smoothedValue(nowMaybe) / maxValue;
  }

  return {
    setValue: setValue,
    smoothedValue: smoothedValue,
    smoothedFactor: smoothedFactor
  };
}
;// CONCATENATED MODULE: ./src/index.ts


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	// module exports must be returned from runtime so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__("./src/index.ts");
/******/ })()
;